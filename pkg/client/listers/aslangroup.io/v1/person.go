/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/aslanbekirov/personcrd/pkg/apis/aslangroup.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PersonLister helps list Persons.
type PersonLister interface {
	// List lists all Persons in the indexer.
	List(selector labels.Selector) (ret []*v1.Person, err error)
	// Persons returns an object that can list and get Persons.
	Persons(namespace string) PersonNamespaceLister
	PersonListerExpansion
}

// personLister implements the PersonLister interface.
type personLister struct {
	indexer cache.Indexer
}

// NewPersonLister returns a new PersonLister.
func NewPersonLister(indexer cache.Indexer) PersonLister {
	return &personLister{indexer: indexer}
}

// List lists all Persons in the indexer.
func (s *personLister) List(selector labels.Selector) (ret []*v1.Person, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Person))
	})
	return ret, err
}

// Persons returns an object that can list and get Persons.
func (s *personLister) Persons(namespace string) PersonNamespaceLister {
	return personNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PersonNamespaceLister helps list and get Persons.
type PersonNamespaceLister interface {
	// List lists all Persons in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Person, err error)
	// Get retrieves the Person from the indexer for a given namespace and name.
	Get(name string) (*v1.Person, error)
	PersonNamespaceListerExpansion
}

// personNamespaceLister implements the PersonNamespaceLister
// interface.
type personNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Persons in the indexer for a given namespace.
func (s personNamespaceLister) List(selector labels.Selector) (ret []*v1.Person, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Person))
	})
	return ret, err
}

// Get retrieves the Person from the indexer for a given namespace and name.
func (s personNamespaceLister) Get(name string) (*v1.Person, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("person"), name)
	}
	return obj.(*v1.Person), nil
}
